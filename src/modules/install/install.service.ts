import { Injectable } from '@nestjs/common';

@Injectable()
export class InstallService {
  getInstall(): {} {
    return {
      head_title: 'Creación de un proyecto en NestJS',
      title1: '1. Configuración inicial',
      steps1: 'Pasos para la configuración inicial',
      steps1_1: 'Instalar la CLI de NestJS:',
      steps1_1_img: '/install1.png',
      steps1_2: 'Crear un nuevo proyecto:',
      steps1_2_img: '/install2.png',
      steps1_3: 'Navegar al proyecto recién creado:',
      steps1_3_img: '/install3.png',
      steps1_4: 'Iniciar el servidor de desarrollo:',
      steps1_4_img: '/install4.png',
      steps1_4_info: 'Por defecto, el servidor se ejecuta en http://localhost:3000.',
      steps2: 'Estructura del proyecto generada automáticamente',
      steps2_1: 'src/: donde se introduce todo el código',
      steps2_2: 'main.ts: Punto de entrada de la aplicación.',
      steps2_3: 'app.module.ts: Módulo principal donde se registran otros módulos.',
      steps2_4: 'app.controller.ts: Controlador que define las rutas y las respuestas.',
      steps2_5: 'app.service.ts: Servicio que contiene la lógica de negocio básica.',
      steps2_6: 'test/: Archivos para pruebas unitarias y de integración.',
      steps2_7: 'package.json: Lista de dependencias y scripts del proyecto.',
      title2: '2. Primeros pasos: "Hola Mundo"',
      steps3: 'Modificar el controlador principal',
      steps3_1: 'Abre el archivo src/app.controller.ts y actualiza el método getHello() para devolver un mensaje personalizado:',
      steps3_1_img: '/install5.png',
      steps3_2: 'Reinicia el servidor (si no tienes recarga automática activada) y visita http://localhost:3000. Deberías ver:',
      steps3_2_img: '/install6.png',
      steps4: 'Añadir una nueva ruta',
      steps4_1: 'Agrega un nuevo método al controlador para manejar otra ruta:',
      steps4_1_img: '/install7.png',
      steps4_2: 'Accede a http://localhost:3000/saludo para verificar el nuevo endpoint.',
      title3: '3. Explicación modular',
      steps5: 'Conceptos clave',
      steps5_1: 'Controladores: Manejan las solicitudes entrantes y devuelven respuestas.',
      steps5_2: 'Servicios: Contienen la lógica de negocio y se inyectan en los controladores mediante inyección de dependencias.',
      steps5_3: 'Módulos: Agrupan controladores, servicios y otros módulos relacionados.',
      steps6: 'Ejemplo de un nuevo módulo',
      steps6_1: 'Genera un módulo y un controlador usando la CLI:',
      steps6_1_img: '/install8.png',
      steps6_2: 'La CLI creará los archivos necesarios en la carpeta src/users/. Registra automáticamente el nuevo módulo en app.module.ts.',
      steps6_3: 'Edita users.controller.ts para manejar rutas específicas:',
      steps6_3_img: '/install9.png',
      steps6_4: 'Accede a http://localhost:3000/saludo para verificar el nuevo endpoint.',
      title4: '4. Instalación de dependencias adicionales',
      steps7: 'Integración con bases de datos',
      steps7_1: 'Instala TypeORM y una base de datos como MySQL:',
      steps7_1_img: '/install10.png',
      steps7_2: 'Configura TypeORM en app.module.ts:',
      steps7_2_img: '/install11.png',
      steps8: 'Documentación de APIs con Swagger',
      steps8_1: 'Instala el paquete Swagger:',
      steps8_1_img: '/install11.png',
      steps8_2: 'Configura Swagger en main.ts:',
      steps8_2_img: '/install12.png',
      steps8_3: 'Visita http://localhost:3000/api para acceder a la documentación interactiva.',
    }
  }
}